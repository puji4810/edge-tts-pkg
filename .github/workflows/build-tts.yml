name: Build EdgeTTS CLI

on:
  push:
    tags:
      - "v*"
    branches:
      - main
      - tts-local
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Windows builds
          - os: windows-latest
            artifact_name: edge-tts.exe
            build_name: edge-tts-windows
            arch: x64

          # Linux builds - 多架构
          - os: ubuntu-latest
            artifact_name: edge-tts
            build_name: edge-tts-linux-amd64
            arch: x64
          - os: ubuntu-latest
            artifact_name: edge-tts
            build_name: edge-tts-linux-arm64
            arch: arm64
          - os: ubuntu-latest
            artifact_name: edge-tts
            build_name: edge-tts-linux-armv7
            arch: armv7

          # macOS builds - 多架构
          - os: macos-latest
            artifact_name: edge-tts
            build_name: edge-tts-macos-intel
            arch: x64
          - os: macos-latest
            artifact_name: edge-tts
            build_name: edge-tts-macos-apple
            arch: arm64

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      # 设置交叉编译环境 (Linux ARM)
      - name: Set up QEMU
        if: matrix.os == 'ubuntu-latest' && (matrix.arch == 'arm64' || matrix.arch == 'armv7')
        uses: docker/setup-qemu-action@v3

      - name: Install system dependencies (Ubuntu x64)
        if: matrix.os == 'ubuntu-latest' && matrix.arch == 'x64'
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg

      - name: Install system dependencies (Ubuntu ARM)
        if: matrix.os == 'ubuntu-latest' && (matrix.arch == 'arm64' || matrix.arch == 'armv7')
        run: |
          # 使用 Docker 进行交叉编译
          echo "Will use Docker for ARM compilation"

      - name: Install system dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install ffmpeg

      - name: Install system dependencies (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          choco install ffmpeg

      - name: Install Python dependencies (Native)
        if: matrix.os != 'ubuntu-latest' || matrix.arch == 'x64'
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller
          pip install -r requirements.txt

      - name: Build executable (Native)
        if: matrix.os != 'ubuntu-latest' || matrix.arch == 'x64'
        run: |
          pyinstaller --onefile --name edge-tts run_tts.py

      # ARM 交叉编译
      - name: Build executable (Linux ARM64)
        if: matrix.os == 'ubuntu-latest' && matrix.arch == 'arm64'
        run: |
          docker run --rm --platform linux/arm64 \
            -v $PWD:/workspace \
            -w /workspace \
            python:3.11-slim \
            bash -c "
              apt-get update && apt-get install -y gcc g++ && \
              pip install --upgrade pip && \
              pip install pyinstaller && \
              pip install -r requirements.txt && \
              pyinstaller --onefile --name edge-tts run_tts.py && \
              cd dist && \
              mv edge-tts edge-tts-linux-arm64
            "

      - name: Build executable (Linux ARMv7)
        if: matrix.os == 'ubuntu-latest' && matrix.arch == 'armv7'
        run: |
          docker run --rm --platform linux/arm/v7 \
            -v $PWD:/workspace \
            -w /workspace \
            python:3.11-slim \
            bash -c "
              apt-get update && apt-get install -y gcc g++ && \
              pip install --upgrade pip && \
              pip install pyinstaller && \
              pip install -r requirements.txt && \
              pyinstaller --onefile --name edge-tts run_tts.py && \
              cd dist && \
              mv edge-tts edge-tts-linux-armv7
            "

      - name: Rename artifact (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          cd dist
          mv edge-tts.exe ${{ matrix.build_name }}.exe

      - name: Rename artifact (Unix)
        if: matrix.os != 'windows-latest'&& (matrix.os != 'ubuntu-latest' || matrix.arch == 'x64')
        run: |
          cd dist
          mv edge-tts ${{ matrix.build_name }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.build_name }}
          path: dist/${{ matrix.build_name }}${{ matrix.os == 'windows-latest' && '.exe' || '' }}

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            artifacts/edge-tts-windows/edge-tts-windows.exe
            artifacts/edge-tts-linux-amd64/edge-tts-linux-amd64
            artifacts/edge-tts-linux-arm64/edge-tts-linux-arm64
            artifacts/edge-tts-linux-armv7/edge-tts-linux-armv7
            artifacts/edge-tts-macos-intel/edge-tts-macos-intel
            artifacts/edge-tts-macos-apple/edge-tts-macos-apple
